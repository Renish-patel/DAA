#include <iostream>
#include <stdexcept>

class DynamicArray {
private:
    int* data;
    int length;
    int cap;

    void resize(int new_capacity) {
        int* new_data = new int[new_capacity];
        for (int i = 0; i < length; ++i) {
            new_data[i] = data[i];
        }
        delete[] data;
        data = new_data;
        cap = new_capacity;
    }

public:
    DynamicArray() {
        data = new int[1];
        length = 0;
        cap = 1;
    }

    ~DynamicArray() {
        delete[] data;
    }

    void push_back(int value) {
        if (length == cap) {
            resize(cap * 2);
        }
        data[length++] = value;
    }

    void pop_back() {
        if (length == 0) {
            throw std::out_of_range("Array is empty");
        }
        length--;
        // Optional: shrink the array if needed
    }

    int& operator[](int index) {
        if (index < 0 || index >= length) {
            throw std::out_of_range("Index out of bounds");
        }
        return data[index];
    }

    int size() const {
        return length;
    }

    int capacity() const {
        return cap;
    }
};
